#!/bin/bash

# MTProto 텔레그램 프록시 4개 설치 스크립트
# Rocky Linux 9 호환
# 작성일: 2025-01-22
# 버전: 2.0 (Enhanced)

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 전역 변수
SCRIPT_VERSION="2.0"
INSTALL_DIR="/opt/mtproto"
CONFIG_DIR="/etc/mtproto"
LOG_DIR="/var/log/mtproto"
PORTS=(443 8080 8443 9443)
MTPROTO_VERSION="stable"
SERVER_IP=""
SECRETS=()

# 로깅 함수
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${PURPLE}====== $1 ======${NC}"
}

# 에러 처리 함수
handle_error() {
    log_error "스크립트 실행 중 오류가 발생했습니다. 라인 $1에서 오류"
    exit 1
}

# 배너 출력
print_banner() {
    echo -e "${CYAN}"
    cat << "EOF"
╔═══════════════════════════════════════════════════════════════════╗
║                                                                   ║
║            MTProto 4-Proxy Auto Installer v2.0                   ║
║                                                                   ║
║               Rocky Linux 9 / CentOS Stream 9                    ║
║                                                                   ║
║    포트: 443, 8080, 8443, 9443 (4개 독립 프록시)                 ║
║                                                                   ║
╚═══════════════════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
}

# 시스템 호환성 확인
check_system() {
    log_header "시스템 호환성 확인"

    # Rocky Linux 확인
    if [ -f /etc/rocky-release ]; then
        local version=$(cat /etc/rocky-release | grep -oP '(?<=release )\d+')
        if [ "$version" -eq 9 ]; then
            log_success "Rocky Linux 9이 확인되었습니다."
        else
            log_warning "Rocky Linux $version이 감지되었습니다. Rocky Linux 9 권장"
        fi
    else
        log_warning "Rocky Linux가 아닌 시스템에서 실행 중입니다."
    fi

    # Root 권한 확인
    if [ "$EUID" -ne 0 ]; then
        log_error "이 스크립트는 root 권한으로 실행해야 합니다."
        exit 1
    fi

    log_success "시스템 호환성 확인 완료"
}

# 서버 IP 감지
get_server_ip() {
    log_header "서버 IP 확인"

    SERVER_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || hostname -I | awk '{print $1}')

    if [ -z "$SERVER_IP" ]; then
        SERVER_IP="YOUR_SERVER_IP"
        log_warning "서버 IP를 자동으로 확인할 수 없습니다. 수동으로 입력하세요."
    else
        log_success "서버 IP 확인: $SERVER_IP"
    fi
}

# 의존성 패키지 설치
install_dependencies() {
    log_header "의존성 패키지 설치"

    log_info "패키지 업데이트 중..."
    dnf update -y

    log_info "개발 도구 설치 중..."
    dnf groupinstall -y "Development Tools"

    log_info "필수 패키지 설치 중..."
    dnf install -y git gcc gcc-c++ make cmake openssl-devel zlib-devel epel-release

    log_success "의존성 패키지 설치 완료"
}

# MTProxy 소스 다운로드 및 컴파일
compile_mtproxy() {
    log_header "MTProxy 소스 다운로드 및 컴파일"

    cd /opt

    # 기존 디렉토리 제거
    if [ -d "MTProxy" ]; then
        log_info "기존 MTProxy 디렉토리 제거 중..."
        rm -rf MTProxy
    fi

    log_info "MTProxy 소스 다운로드 중..."
    git clone https://github.com/TelegramMessenger/MTProxy.git
    cd MTProxy

    log_info "MTProxy 컴파일 중..."
    make

    if [ ! -f "objs/bin/mtproto-proxy" ]; then
        log_error "MTProxy 컴파일 실패"
        exit 1
    fi

    # 실행 파일 권한 설정
    chmod +x objs/bin/mtproto-proxy

    log_success "MTProxy 컴파일 완료"
}

# MTProto 바이너리 다운로드 및 설치
install_mtproto() {
    log "MTProto 바이너리 다운로드 중..."

    # 설치 디렉토리 생성
    mkdir -p "$INSTALL_DIR"
    mkdir -p "$CONFIG_DIR"
    mkdir -p "$LOG_DIR"

    # MTProto 소스 다운로드 및 컴파일
    cd /tmp
    if [[ -d "MTProxy" ]]; then
        rm -rf MTProxy
    fi

    git clone https://github.com/TelegramMessenger/MTProxy.git
    cd MTProxy

    # 컴파일
    make

    # 바이너리 복사
    cp objs/bin/mtproto-proxy "$INSTALL_DIR/"

    # 실행 권한 부여
    chmod +x "$INSTALL_DIR/mtproto-proxy"

    success "MTProto 바이너리 설치 완료"
}

# Secret 키 생성 함수
generate_secret() {
    openssl rand -hex 16
}

# Secret key 생성
generate_secrets() {
    log_header "Secret keys 생성"

    for i in {1..4}; do
        secret=$(generate_secret)
        SECRETS+=("$secret")
        log_info "프록시 $i Secret: $secret"
    done

    log_success "모든 Secret keys 생성 완료"
}

# MTProto 설정 파일 생성
create_config_files() {
    log "설정 파일 생성 중..."

    # 공통 프록시 설정 다운로드
    curl -s https://core.telegram.org/getProxySecret -o "$CONFIG_DIR/proxy-secret"
    curl -s https://core.telegram.org/getProxyConfig -o "$CONFIG_DIR/proxy-multi.conf"

    for i in {0..3}; do
        port=${PORTS[$i]}
        secret=${SECRETS[$i]}

        cat > "$CONFIG_DIR/mtproto-proxy-$port.conf" << EOF
# MTProto Proxy Configuration - Port $port
# Auto-generated by MTProto 4-Proxy Installer

PORT=$port
SECRET=$secret
WORKERS=4
STATS_PORT=$((port + 1000))
TAG=
BIND_IP=0.0.0.0
NICE=-20
SECURE_ONLY=1
EOF

        log "설정 파일 생성: mtproto-proxy-$port.conf"
    done

    success "모든 설정 파일 생성 완료"
}

# systemd 서비스 파일 생성
create_systemd_services() {
    log "systemd 서비스 파일 생성 중..."

    for i in {0..3}; do
        port=${PORTS[$i]}
        secret=${SECRETS[$i]}
        stats_port=$((port + 1000))

        cat > "/etc/systemd/system/mtproto-proxy-$port.service" << EOF
[Unit]
Description=MTProto Proxy Server - Port $port
After=network.target

[Service]
Type=simple
User=nobody
Group=nobody
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/mtproto-proxy \\
    -u nobody \\
    -p $stats_port \\
    -H $port \\
    -S $secret \\
    --aes-pwd $CONFIG_DIR/proxy-secret \\
    $CONFIG_DIR/proxy-multi.conf
ExecReload=/bin/kill -HUP \$MAINPID
KillMode=mixed
Restart=always
RestartSec=5
LimitNOFILE=65536
StandardOutput=journal
StandardError=journal
SyslogIdentifier=mtproto-proxy-$port

[Install]
WantedBy=multi-user.target
EOF

        log "서비스 파일 생성: mtproto-proxy-$port.service"
    done

    # systemd 데몬 리로드
    systemctl daemon-reload

    success "모든 systemd 서비스 파일 생성 완료"
}

# 방화벽 설정
configure_firewall() {
    log "방화벽 설정 중..."

    # firewalld 시작 및 활성화
    systemctl enable firewalld
    systemctl start firewalld

    # MTProto 포트 열기
    for port in "${PORTS[@]}"; do
        firewall-cmd --permanent --add-port="$port/tcp"
        log "방화벽 포트 $port/tcp 열기 완료"
    done

    # 통계 포트 열기 (선택사항)
    for port in "${PORTS[@]}"; do
        stats_port=$((port + 1000))
        firewall-cmd --permanent --add-port="$stats_port/tcp"
        log "통계 포트 $stats_port/tcp 열기 완료"
    done

    # 방화벽 규칙 적용
    firewall-cmd --reload

    success "방화벽 설정 완료"
}

# 서비스 시작 및 활성화
start_services() {
    log "MTProto 프록시 서비스 시작 중..."

    for port in "${PORTS[@]}"; do
        systemctl enable "mtproto-proxy-$port"
        systemctl start "mtproto-proxy-$port"

        # 서비스 상태 확인
        if systemctl is-active --quiet "mtproto-proxy-$port"; then
            success "mtproto-proxy-$port 서비스 시작 완료"
        else
            error "mtproto-proxy-$port 서비스 시작 실패"
        fi
    done

    success "모든 MTProto 프록시 서비스 시작 완료"
}

# 프록시 상태 확인
check_proxy_status() {
    log "프록시 상태 확인 중..."

    echo -e "\n${BLUE}=== MTProto 프록시 상태 ===${NC}"
    for port in "${PORTS[@]}"; do
        if systemctl is-active --quiet "mtproto-proxy-$port"; then
            echo -e "${GREEN}✓${NC} mtproto-proxy-$port: 활성화됨"
        else
            echo -e "${RED}✗${NC} mtproto-proxy-$port: 비활성화됨"
        fi
    done
}

# 연결 정보 출력
print_connection_info() {
    echo -e "\n${PURPLE}╔═══════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                      연결 정보                                    ║${NC}"
    echo -e "${PURPLE}╚═══════════════════════════════════════════════════════════════════╝${NC}"

    echo -e "\n${CYAN}서버 IP:${NC} $SERVER_IP"
    echo -e "${CYAN}설치 일시:${NC} $(date)"

    echo -e "\n${YELLOW}=== 프록시 연결 정보 ===${NC}"
    for i in {0..3}; do
        port=${PORTS[$i]}
        secret=${SECRETS[$i]}

        echo -e "\n${GREEN}프록시 $((i+1)):${NC}"
        echo -e "  포트: $port"
        echo -e "  Secret: $secret"
        echo -e "  서버: $SERVER_IP"
        echo -e "  연결 링크: tg://proxy?server=$SERVER_IP&port=$port&secret=$secret"
    done

    echo -e "\n${YELLOW}=== 텔레그램 봇 링크 ===${NC}"
    for i in {0..3}; do
        port=${PORTS[$i]}
        secret=${SECRETS[$i]}
        echo -e "프록시 $((i+1)): https://t.me/proxy?server=$SERVER_IP&port=$port&secret=$secret"
    done
}

# 관리 명령어 가이드
print_management_guide() {
    echo -e "\n${PURPLE}╔═══════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                    관리 명령어 가이드                            ║${NC}"
    echo -e "${PURPLE}╚═══════════════════════════════════════════════════════════════════╝${NC}"

    echo -e "\n${YELLOW}=== 서비스 관리 ===${NC}"
    echo -e "${CYAN}모든 프록시 상태 확인:${NC}"
    for port in "${PORTS[@]}"; do
        echo "  systemctl status mtproto-proxy-$port"
    done

    echo -e "\n${CYAN}모든 프록시 재시작:${NC}"
    for port in "${PORTS[@]}"; do
        echo "  systemctl restart mtproto-proxy-$port"
    done

    echo -e "\n${CYAN}모든 프록시 중지:${NC}"
    for port in "${PORTS[@]}"; do
        echo "  systemctl stop mtproto-proxy-$port"
    done

    echo -e "\n${CYAN}모든 프록시 시작:${NC}"
    for port in "${PORTS[@]}"; do
        echo "  systemctl start mtproto-proxy-$port"
    done

    echo -e "\n${YELLOW}=== 로그 확인 ===${NC}"
    echo -e "${CYAN}실시간 로그 확인:${NC}"
    for port in "${PORTS[@]}"; do
        echo "  journalctl -u mtproto-proxy-$port -f"
    done

    echo -e "\n${CYAN}로그 검색:${NC}"
    for port in "${PORTS[@]}"; do
        echo "  journalctl -u mtproto-proxy-$port --since today"
    done

    echo -e "\n${YELLOW}=== 네트워크 확인 ===${NC}"
    echo -e "${CYAN}포트 리스닝 확인:${NC} netstat -tuln | grep -E '(443|8080|8443|9443)'"
    echo -e "${CYAN}방화벽 상태 확인:${NC} firewall-cmd --list-ports"
    echo -e "${CYAN}연결 수 확인:${NC} ss -tuln | grep -E '(443|8080|8443|9443)'"

    echo -e "\n${YELLOW}=== 성능 모니터링 ===${NC}"
    echo -e "${CYAN}CPU/메모리 사용량:${NC} top -p \$(pgrep mtproto-proxy | tr '\n' ',')"
    echo -e "${CYAN}연결 통계:${NC} curl http://localhost:\$STATS_PORT/stats"

    echo -e "\n${YELLOW}=== 설정 파일 위치 ===${NC}"
    echo -e "${CYAN}서비스 파일:${NC} /etc/systemd/system/mtproto-proxy-*.service"
    echo -e "${CYAN}설정 파일:${NC} $CONFIG_DIR/"
    echo -e "${CYAN}바이너리:${NC} $INSTALL_DIR/mtproto-proxy"
    echo -e "${CYAN}로그 디렉토리:${NC} $LOG_DIR/"
}

# 설정 정보 저장
save_config_info() {
    local config_file="$CONFIG_DIR/installation-info.txt"

    cat > "$config_file" << EOF
# MTProto 4-Proxy Installation Information
# Generated by MTProto 4-Proxy Installer v$SCRIPT_VERSION
# Installation Date: $(date)

SERVER_IP=$SERVER_IP
INSTALL_DIR=$INSTALL_DIR
CONFIG_DIR=$CONFIG_DIR
LOG_DIR=$LOG_DIR

# Proxy Configuration
EOF

    for i in {0..3}; do
        port=${PORTS[$i]}
        secret=${SECRETS[$i]}
        echo "PROXY_$((i+1))_PORT=$port" >> "$config_file"
        echo "PROXY_$((i+1))_SECRET=$secret" >> "$config_file"
    done

    echo "" >> "$config_file"
    echo "# Connection Links" >> "$config_file"
    for i in {0..3}; do
        port=${PORTS[$i]}
        secret=${SECRETS[$i]}
        echo "PROXY_$((i+1))_LINK=tg://proxy?server=$SERVER_IP&port=$port&secret=$secret" >> "$config_file"
    done

    chmod 600 "$config_file"
    log "설정 정보 저장: $config_file"
}

# 정리 함수
cleanup() {
    log "임시 파일 정리 중..."
    cd /
    rm -rf /tmp/MTProxy
    success "정리 완료"
}

# 메인 실행 함수
main() {
    log_header "MTProto 텔레그램 프록시 4개 설치 시작"

    check_system
    get_server_ip
    install_dependencies
    install_mtproto
    generate_secrets
    create_config_files
    create_systemd_services
    configure_firewall
    start_services

    echo ""
    check_proxy_status
    echo ""
    print_connection_info
    echo ""
    print_management_guide

    log_success "MTProto 프록시 설치가 완전히 완료되었습니다!"
    echo ""
    echo -e "${GREEN}설치된 프록시:${NC}"
    echo "• 포트 443, 8080, 8443, 9443"
    echo "• 각 포트별 고유 Secret 키"
    echo "• systemd 서비스로 자동 시작"
    echo ""
    echo -e "${YELLOW}주의사항:${NC}"
    echo "• Secret 키 정보는 /etc/mtproto/installation-info.txt에 저장됨"
    echo "• 서비스는 시스템 재부팅 시 자동으로 시작됨"
    echo "• 방화벽에서 모든 포트가 열려있음을 확인하세요"
}

# 에러 트랩 설정
trap 'handle_error $LINENO' ERR

# 스크립트 실행
main "$@"